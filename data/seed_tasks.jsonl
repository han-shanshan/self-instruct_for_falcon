{"id": "seed_task_148", "name": "pos_tag_for_word", "instruction": "Identify the pos tag of the word in the given sentence.", "instances": [{"input": "Word: excited\nSentence: She felt so excited that her application got approval.", "output": "Adjective, JJ."}], "is_classification": true}
{"id": "seed_task_150", "name": "paraphrasing_classification", "instruction": "In this task, you need to compare the meaning of the two sentences and tell if they are the same. Output yes or no.", "instances": [{"input": "Sentence 1: The teacher is speaking to the class.\nSentence 2: The teacher is speaking to the students.", "output": "yes"}], "is_classification": true}
{"id": "seed_task_151", "name": "toxic_sentence_detection", "instruction": "Tell if the sentence contains toxic language.", "instances": [{"input": "aw, no wonder she married you. you are a bastard.", "output": "Yes"}], "is_classification": true}
{"id": "seed_task_152", "name": "ethicality_judgement", "instruction": "Tell me whether the behavior is ethical or not. Output \"ethical\" or \"not ethical\".", "instances": [{"input": "Turn off the door when I am in the office.", "output": "ethical"}], "is_classification": true}
{"id": "seed_task_153", "name": "job_suitableness", "instruction": "Given my personality and the job, tell me if I would be suitable.", "instances": [{"input": "Personality: I am easygoing and like to talk to people. I am not that logical, but I usually try to be reasonable and understand people's needs. When hanging out, I am usually considerate.\nJob: programmer.", "output": "Not suitable."}], "is_classification": true}
{"id": "seed_task_154", "name": "passive-aggressiveness_identification", "instruction": "Identify if the following instance is passive-aggressive or not. Output 1 for passive-aggressive, and 0 for not.", "instances": [{"input": "You\u2019re so lucky you got that promotion", "output": "1"}], "is_classification": true}
{"id": "seed_task_155", "name": "syllogism", "instruction": "Decide whether the syllogism is logically sound.", "instances": [{"input": "All Germans are European.\nSome Germans have blonde hair.\nTherefore, no Europeans have blonde hair.", "output": "Not logically sound."}], "is_classification": true}
{"id": "seed_task_156", "name": "topic_classification", "instruction": "Choose a topic for the following article. Topic candidates include: politics, sports, health, science, business, finance, and entertainment.", "instances": [{"input": "Whales are a widely distributed and diverse group of fully aquatic placental marine mammals. They are an informal grouping within the infraorder Cetacea, which usually excludes dolphins and porpoises. Whales, dolphins and porpoises belong to the order Cetartiodactyla, which consists of even-toed ungulates. Their closest non-cetacean living relatives are the hippopotamuses, from which they and other cetaceans diverged about 54 million years ago. The two parvorders of whales, baleen whales (Mysticeti) and toothed whales (Odontoceti), are thought to have had their last common ancestor around 34 million years ago. Whales consist of eight extant families: Balaenopteridae (the rorquals), Balaenidae (right whales), Cetotheriidae (the pygmy right whale), Eschrichtiidae (the grey whale), Monodontidae (belugas and narwhals), Physeteridae (the sperm whale), Kogiidae (the dwarf and pygmy sperm whale), and Ziphiidae (the beaked whales).", "output": "science"}], "is_classification": true}
{"id": "seed_task_157", "name": "sentence_sentiment", "instruction": "Classify the sentiment of the sentence into positive, negative or mixed.", "instances": [{"input": "I enjoy the flavor of the restaurant but their service is too slow.", "output": "mixed"}], "is_classification": true}
{"id": "seed_task_158", "name": "code_syntax_error", "instruction": "You need to read a code and detect if there is a syntax error or not. Outpus true if there is error, output false if there is not.", "instances": [{"input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "false"}], "is_classification": true}